{"version":3,"file":"static/js/96.b011eef1.chunk.js","mappings":"oRAEaA,EAAOC,EAAAA,GAAAA,KAAH,0PAYJC,EAAQD,EAAAA,GAAAA,MAAH,4KAULE,EAAQF,EAAAA,GAAAA,MAAH,8EAMLG,EAASH,EAAAA,GAAAA,OAAH,iQ,kIC5BNI,E,QAAQJ,GAAAA,GAAH,0H,SC0ElB,EApEmB,SAAC,GAAuC,IAArCK,EAAoC,EAApCA,SAAoC,IAA1BC,YAAAA,OAA0B,SAClDC,GAAeC,EAAAA,EAAAA,UACfC,GAAgBD,EAAAA,EAAAA,UAChBE,GAAmBF,EAAAA,EAAAA,UACnBG,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAgB3B,OACE,UAAC,KAAD,CAAMR,SAfa,SAAAS,GACnBA,EAAMC,iBAEN,IAAMC,GAAQ,mBACPV,GAAe,CAAEW,KAAMV,EAAaW,QAAQC,QADrC,IAEZC,MAAOX,EAAcS,QAAQC,MAC7BE,SAAUX,EAAiBQ,QAAQC,QAGrCd,EAASW,GAETF,EAAMQ,OAAOC,OACd,EAGC,WACE,SAACnB,EAAD,UAAQE,EAAc,UAAY,YACjCA,EAAc,MACb,UAAC,KAAD,mBAEE,SAAC,KAAD,CACEkB,KAAK,OACLP,KAAK,OACLQ,YAAa,kBACbC,IAAKnB,EACLoB,UAAQ,QAId,UAAC,KAAD,oBAEE,SAAC,KAAD,CACEH,KAAK,QACLP,KAAK,QACLQ,YAAa,6BACbC,IAAKjB,EACLkB,UAAQ,QAGZ,UAAC,KAAD,uBAEE,SAAC,KAAD,CACEH,KAAK,WACLP,KAAK,WACLQ,YAAa,mBACbG,UAAW,EACXF,IAAKhB,EACLiB,UAAQ,QAGZ,SAAC,KAAD,CAAQE,SAAqB,YAAXlB,EAAsBa,KAAK,SAA7C,SACGlB,EAAc,UAAY,YAEjB,YAAXK,IAAwB,SAACmB,EAAA,EAAD,MAG9B,C,yFCnEYC,EAAa/B,EAAAA,GAAAA,IAAH,mGAECgC,E,oIC+BxB,UAzBA,WACE,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAazB,EAAAA,EAAAA,IAAY0B,EAAAA,IACzBC,GAAQ3B,EAAAA,EAAAA,IAAY4B,EAAAA,IAY1B,OAVAC,EAAAA,EAAAA,YAAU,WACHJ,GAELF,EAAS,YACV,GAAE,CAACE,EAAYF,KAOd,UAAC,IAAD,WACa,OAAVI,IAAmBG,EAAAA,EAAAA,IAAM,+BAC1B,SAAC,IAAD,CAAYrC,SAPO,SAAAW,GACrBiB,GAASU,EAAAA,EAAAA,IAAgB3B,GAC1B,KAMG,SAAC,IAAD,MAGL,C","sources":["components/ContactForm/ContactForm.styled.js","components/SignInForm/SignUpForm.styled.js","components/SignInForm/SignInForm.jsx","pages/Background.styled.js","pages/SignUp/SignUp.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  margin: 0 auto;\n  padding: 30px;\n  border-radius: 15px;\n  border: 1px solid rgba(90,40,21, 0.5);\n  width: 400px;\n  background-color: rgba(255, 255, 255, 0.6);\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  text-transform: capitalize;\n  font-size: 28px;\n  font-weight: 500;\n  width: 300px;\n`;\n\nexport const Input = styled.input`\n  font-size: 20px;\n  height: 30px;\n  width: 300px;\n`;\n\nexport const Button = styled.button`\n  width: 200px;\n  padding: 15px;\n  font-size: 28px;\n  font-weight: 700;\n  border-radius: 10px;\n  background-color: rgba(179, 105, 76, 0.5);\n\n&:hover{\n  background-color: rgba(90,40,21, 1);\n  color: rgba(255, 255, 255, 1)\n}\n`;\n","import styled from \"styled-components\";\n\nexport const Title = styled.h2`\nfont-weight: 700;\nfont-size: 32px;\ntext-align: center;\ntext-transform: uppercase;\nmargin: 0;\n`","import { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Label, Input } from '../ContactForm/ContactForm.styled';\nimport { Loader } from '../Loader/Loader';\nimport { selectStatus } from 'redux/users/selectors';\nimport { useSelector } from 'react-redux';\nimport { Title } from './SignUpForm.styled';\n\nconst SignUpForm = ({ onSubmit, isLoginForm = false }) => {\n  const nameInputRef = useRef();\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const status = useSelector(selectStatus);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const formData = {\n      ...(!isLoginForm && { name: nameInputRef.current.value }),\n      email: emailInputRef.current.value,\n      password: passwordInputRef.current.value,\n    };\n\n    onSubmit(formData);\n\n    event.target.reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Title>{isLoginForm ? 'Sign In' : 'Sign Up'}</Title>\n      {isLoginForm ? null : (\n        <Label>\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            placeholder={'Enter your Name'}\n            ref={nameInputRef}\n            required\n          />\n        </Label>\n      )}\n      <Label>\n        Email\n        <Input\n          type=\"email\"\n          name=\"email\"\n          placeholder={'Enter a valid email addres'}\n          ref={emailInputRef}\n          required\n        />\n      </Label>\n      <Label>\n        Password\n        <Input\n          type=\"password\"\n          name=\"password\"\n          placeholder={'Enter a password'}\n          minLength={7}\n          ref={passwordInputRef}\n          required\n        />\n      </Label>\n      <Button disabled={status === 'pending'} type=\"submit\">\n        {isLoginForm ? 'Sign In' : 'Sign Up'}\n      </Button>\n      {status === 'pending' && <Loader />}\n    </Form>\n  );\n};\n\nSignUpForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default SignUpForm;\n","import styled from \"styled-components\";\nimport bgc from '../images/bgc.png'\n\nexport const Background = styled.div`\nheight: 1120px;\nbackground-image: url(${bgc});\nbackground-position: center;\n`","import SignUpForm from 'components/SignInForm/SignInForm';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { registerRequest } from 'redux/users/operations';\nimport { selectAuthError, selectIsLoggedIn } from 'redux/users/selectors';\nimport { Background } from 'pages/Background.styled';\nimport { toast } from 'react-toastify';\nimport { Toast } from 'components/Toast/Toast';\n\n\nfunction SignUpPage() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const error = useSelector(selectAuthError);\n\n  useEffect(() => {\n    if (!isLoggedIn) return;\n\n    navigate('/contacts');\n  }, [isLoggedIn, navigate]);\n\n  const handleRegister = formData => {\n    dispatch(registerRequest(formData));\n  };\n\n  return (\n    <Background>\n      {error !== null && (toast('Oops. Something went wrong'))}\n      <SignUpForm onSubmit={handleRegister} />\n      <Toast/>\n    </Background>\n  );\n};\n\nexport default SignUpPage;"],"names":["Form","styled","Label","Input","Button","Title","onSubmit","isLoginForm","nameInputRef","useRef","emailInputRef","passwordInputRef","status","useSelector","selectStatus","event","preventDefault","formData","name","current","value","email","password","target","reset","type","placeholder","ref","required","minLength","disabled","Loader","Background","bgc","dispatch","useDispatch","navigate","useNavigate","isLoggedIn","selectIsLoggedIn","error","selectAuthError","useEffect","toast","registerRequest"],"sourceRoot":""}